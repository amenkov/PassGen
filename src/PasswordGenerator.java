import org.apache.commons.lang3.RandomStringUtils;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class PasswordGenerator {
    private JButton Generate;
    private JPanel panel1;
    private JTextField Password;
    private JLabel pLength;
    private JComboBox comboBox1;
    private JTextField lengthValue;


    public static void main(String[] args) {
        JFrame frame = new JFrame("PasswordGenerator");
        frame.setContentPane(new PasswordGenerator().panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        frame.setSize(200, 150);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);


    }

    public PasswordGenerator() {
        for (int i = 6; i <= 20; i++) {
            comboBox1.addItem(i);
        }
        comboBox1.setSelectedIndex(4);
        Generate.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvxyz1234567890!#$&%+<>()*/:;?@{}";
                try {
                    Integer length = Integer.parseInt(comboBox1.getSelectedItem().toString());
                    if (length == 0 || (length < 6 || length > 21)) {
                        throw new Exception();
                    }
                    String password;
                    do {
                        password = RandomStringUtils.random(length, charset.toCharArray());
                    }
                    while (!(password.matches("(.*)\\p{Lower}(.*)") & password.matches("(.*)\\p{Upper}(.*)") &
                            password.matches("(.*)\\p{Digit}(.*)") & password.matches("\\w+\\p{Punct}\\w*")));
                    Password.setText(password);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(panel1, "Недопустимый ввод: Длина пароля не может быть меньше 6 и больше 20 символов");
                }
            }
        });
    }


    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-12828863));
        Font panel1Font = this.$$$getFont$$$("Fira Code", -1, -1, panel1.getFont());
        if (panel1Font != null) panel1.setFont(panel1Font);
        panel1.setForeground(new Color(-12828863));
        panel1.setInheritsPopupMenu(true);
        Password = new JTextField();
        Password.setBackground(new Color(-12828863));
        Password.setCaretColor(new Color(-13948117));
        Password.setDoubleBuffered(false);
        Password.setEditable(false);
        Password.setFocusCycleRoot(false);
        Font PasswordFont = this.$$$getFont$$$("Fira Code", -1, -1, Password.getFont());
        if (PasswordFont != null) Password.setFont(PasswordFont);
        Password.setForeground(new Color(-15859962));
        Password.setInheritsPopupMenu(false);
        Password.setSelectedTextColor(new Color(-13948117));
        Password.setSelectionColor(new Color(-15859962));
        panel1.add(Password, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        pLength = new JLabel();
        pLength.setForeground(new Color(-15859962));
        pLength.setText("Password Length:");
        pLength.setToolTipText("");
        panel1.add(pLength, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBox1 = new JComboBox();
        comboBox1.setEditable(false);
        Font comboBox1Font = this.$$$getFont$$$("Fira Code", -1, -1, comboBox1.getFont());
        if (comboBox1Font != null) comboBox1.setFont(comboBox1Font);
        comboBox1.setForeground(new Color(-13948117));
        comboBox1.setOpaque(false);
        panel1.add(comboBox1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Generate = new JButton();
        Generate.setAutoscrolls(false);
        Generate.setBackground(new Color(-12828863));
        Generate.setBorderPainted(true);
        Generate.setContentAreaFilled(false);
        Generate.setDefaultCapable(false);
        Generate.setEnabled(true);
        Font GenerateFont = this.$$$getFont$$$("Fira Code", -1, -1, Generate.getFont());
        if (GenerateFont != null) Generate.setFont(GenerateFont);
        Generate.setForeground(new Color(-12828863));
        Generate.setHideActionText(true);
        Generate.setInheritsPopupMenu(true);
        Generate.setOpaque(false);
        Generate.setSelected(false);
        Generate.setText("Generate Password");
        panel1.add(Generate, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(170, 20), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
